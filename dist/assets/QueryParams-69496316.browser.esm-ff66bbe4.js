import{b0 as E,b1 as m,B as i,aX as h,l as u,X as l}from"./index-7323ac20.js";import{a as d,C as w}from"./setErc20Allowance-5ac91ab4.browser.esm-6af33fd8.js";const C=(()=>E("0x80ac58cd"))(),R=(()=>E("0xd9b67a26"))(),_={name:"Failed to load NFT metadata"};async function y(t,a,e){if(a.startsWith("data:application/json;base64")&&typeof m<"u"){const s=a.split(",")[1],o=JSON.parse(m.from(s,"base64").toString("utf-8"));return d.parse({...o,id:i.from(t).toString(),uri:a})}const r=a.replace("{id}",h(i.from(t).toHexString(),32).slice(2));let n;try{n=await e.downloadJSON(r)}catch{const o=a.replace("{id}",i.from(t).toString());try{n=await e.downloadJSON(o)}catch{console.warn(`failed to get token metadata: ${JSON.stringify({tokenId:t.toString(),tokenUri:a})} -- falling back to default metadata`),n=_}}return d.parse({...n,id:i.from(t).toString(),uri:a})}async function F(t,a,e,r){let n;const s=(await u(()=>import("./IERC165-acb33597.js"),[])).default,o=new l(t,s,a),[p,b]=await Promise.all([o.supportsInterface(C),o.supportsInterface(R)]);if(p){const c=(await u(()=>import("./index-7323ac20.js").then(f=>f.dG),["assets/index-7323ac20.js","assets/index-c7a68507.css"])).default;n=await new l(t,c,a).tokenURI(e)}else if(b){const c=(await u(()=>import("./index-7323ac20.js").then(f=>f.dI),["assets/index-7323ac20.js","assets/index-c7a68507.css"])).default;n=await new l(t,c,a).uri(e)}else throw Error("Contract must implement ERC 1155 or ERC 721.");return n?y(e,n,r):d.parse({..._,id:i.from(e).toString(),uri:""})}async function S(t,a){return typeof t=="string"?t:await a.upload(w.parse(t))}async function A(t,a,e,r){if(I(t))return t;if(T(t))return await a.uploadBatch(t.map(s=>w.parse(s)),{rewriteFileNames:{fileStartNumber:e||0},onProgress:r==null?void 0:r.onProgress});throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}function x(t){const a=t[0].substring(0,t[0].lastIndexOf("/"));for(let e=0;e<t.length;e++){const r=t[e].substring(0,t[e].lastIndexOf("/"));if(a!==r)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${a}' but got '${r}'`)}return a.replace(/\/$/,"")+"/"}function I(t){return t.find(a=>typeof a!="string")===void 0}function T(t){return t.find(a=>typeof a!="object")===void 0}const L=100;export{L as D,_ as F,C as I,R as a,y as b,A as c,F as f,x as g,S as u};
